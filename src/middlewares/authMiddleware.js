import { StatusCodes } from "http-status-codes";
import { env } from "~/config/environment";
import { JwtProvider } from "~/providers/JwtProvider";
import ApiError from "~/utils/ApiError";

// Middleware n√†y s·∫Ω ƒë·∫£m nhi·ªám vi·ªác quan tr·ªçng: X√°c th·ª±c c√°i JWT accessToken nh·∫≠n ƒë∆∞·ª£c t·ª´ ph√≠a FE c√≥ h·ª£p l·ªá hay kh√¥ng
const isAuthorized = async (req, res, next) => {
    // L·∫•y accessToken n·∫±m trong request cookies ph√≠a client - withCredentials trong file authorizeAxios
    const clientAccessToken = req.cookies?.accessToken;

    // N·∫øu nh∆∞ c√°i clientAccessToken kh√¥ng t·ªìn t·∫°i th√¨ tr·∫£ v·ªÅ l·ªói lu√¥n
    if (!clientAccessToken) {
        next(
            new ApiError(
                StatusCodes.UNAUTHORIZED,
                "Unauthorized (token not found)"
            )
        );
        return;
    }

    try {
        //B1 : Th·ª±c hi·ªán gi·∫£i m√£ token xem n√≥ c√≥ h·ª£p l·ªá hay l√† kh√¥ng
        const accessTokenDecoded = await JwtProvider.verifyToken(
            clientAccessToken,
            env.ACCESS_TOKEN_SECRET_SIGNATURE
        );
        // console.log(
        //     "üöÄ ~ isAuthorized ~ accessTokenDecoded:",
        //     accessTokenDecoded
        // );

        /* B2: Quan tr·ªçng: N·∫øu nh∆∞ c√°i token h·ª£p l·ªá, th√¨ s·∫Ω c·∫ßn ph·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ v√†o c√°i req.
         * jwtDecoded, ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng c·∫ßn x·ª≠ l√≠ ph√≠a sau
         */
        req.jwtDecoded = accessTokenDecoded;

        // B3: Cho ph√©p request ƒëi ti·∫øp
        next();
    } catch (error) {
        // console.log("üöÄ ~ isAuthorized ~ error:", error);
        // N·∫øu c√°i accessToken n√≥ b·ªã h·∫øt h·∫°n (expired) th√¨ m√¨nh c·∫ßn tr·∫£ v·ªÅ m·ªôt c√°i m√† l·ªói GONE - 410 cho ph√≠a FE bi·∫øt ƒë·ªÉ g·ªçi api RefreshToken
        if (error?.message?.includes("jwt expired")) {
            next(new ApiError(StatusCodes.GONE, "Need to refresh token."));
            return;
        }

        // N·∫øu nh∆∞ c√°i accessToken n√≥ kh√¥ng h·ª£p l·ªá do b·∫•t c·ª© ƒëi·ªÅu g√¨ kh√°c v·ª• h·∫øt h·∫°n th√¨ ch√∫ng th·∫≥ng tay tr·∫£ v·ªÅ m√£ 401 cho ph√≠a FE g·ªçi api sign_out lu√¥n
        next(new ApiError(StatusCodes.UNAUTHORIZED, "Unauthorized "));
    }
};

export const authMiddleware = { isAuthorized };
