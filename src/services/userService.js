/* eslint-disable no-useless-catch */
import { userModel } from "~/models/userModel";
import ApiError from "~/utils/ApiError";
import bcryptjs from "bcryptjs";
import { StatusCodes } from "http-status-codes";
import { v4 as uuidv4 } from "uuid";
import { pickUser } from "~/utils/formatters";
import { WEBSITE_DOMAIN } from "~/utils/constants";
import { BrevoProvider } from "~/providers/BrevoProvider";
import { JwtProvider } from "~/providers/JwtProvider";
import { env } from "~/config/environment";
import { CloudinaryProvider } from "~/providers/CloudinaryProvider";

const createNew = async (reqBody) => {
    try {
        // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng c·ªßa ch√∫ng ta hay ch∆∞a
        const existUser = await userModel.findOneByEmail(reqBody.email);
        if (existUser) {
            throw new ApiError(StatusCodes.CONFLICT, "Email already exists!");
        }
        // T·∫°o data ƒë·ªÉ l∆∞u v√†o database
        // nameFromEmail: n·∫øu email l√† huy@gmail.com th√¨ s·∫Ω l·∫•y ƒë∆∞·ª£c "huy"
        const nameFromEmail = reqBody.email.split("@")[0];
        const newUser = {
            email: reqBody.email,
            password: bcryptjs.hashSync(reqBody.password, 8), // Tham s·ªë th·ª© hai l√† ƒë·ªô ph·ª©c t·∫°p, gi√° tr·ªã c√†ng cao th√¨ bƒÉm c√†ng l√¢u
            username: nameFromEmail,
            displayName: nameFromEmail, // m·∫∑c ƒë·ªãnh ƒë·ªÉ gi·ªëng username khi user ƒëƒÉng k√Ω m·ªõi, v·ªÅ sau l√†m t√≠nh nƒÉng update cho user
            verifyToken: uuidv4(),
        };
        // Th·ª±c hi·ªán l∆∞u th√¥ng tin user v√†o database
        const createdUser = await userModel.createNew(newUser);

        const getNewUser = await userModel.findOneById(createdUser.insertedId);

        // G·ª≠i email cho ng∆∞·ªùi d√πng x√°c th·ª±c t√†i kho·∫£n
        const verificationLink = `${WEBSITE_DOMAIN}/account/verification?email=${getNewUser.email}&token=${getNewUser.verifyToken}`;
        const customSubject =
            "Plese verify your email before using our services!";
        const htmlContent = `
            <h3>Here is your verification link: </h3>
            <h3>${verificationLink} </h3>
            <h3>Thank <3 </h3>
            
        `;
        // G·ªçi t·ªõi provider g·ª≠i mail
        await BrevoProvider.sendEmail(
            getNewUser.email,
            customSubject,
            htmlContent
        );

        // return tr·∫£ l·∫°i d·ªØ li·ªáu cho ph√≠a controller
        return pickUser(getNewUser);
    } catch (error) {
        throw error;
    }
};

const verifyAccount = async (reqBody) => {
    try {
        //Query user trong database
        const existUser = await userModel.findOneByEmail(reqBody.email);
        //C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
        if (!existUser)
            throw new ApiError(StatusCodes.NOT_FOUND, "Account not found");
        if (existUser.isActive) {
            throw new ApiError(
                StatusCodes.NOT_ACCEPTABLE,
                "Your account is already active!"
            );
        }
        if (reqBody.token !== existUser.verifyToken) {
            throw new ApiError(StatusCodes.NOT_ACCEPTABLE, "Account not found");
        }

        //N·∫øu nh∆∞ m·ªçi th·ª© OK th√¨ ch√∫ng ta b·∫Øt ƒë·∫ßu update l·∫°i th√¥ng tin c·ªßa th·∫±ng user ƒë·ªÉ verify account
        const updateData = {
            isActive: true,
            verifyToken: null,
        };

        const updatedUser = await userModel.update(existUser._id, updateData);

        //Th·ª±c hi·ªán update th√¥ng tin user
        return pickUser(updatedUser);
    } catch (error) {
        throw error;
    }
};

const login = async (reqBody) => {
    try {
        //Query user trong database
        const existUser = await userModel.findOneByEmail(reqBody.email);
        //C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
        if (!existUser)
            throw new ApiError(StatusCodes.NOT_FOUND, "Account not found");
        if (!existUser.isActive) {
            throw new ApiError(
                StatusCodes.NOT_ACCEPTABLE,
                "Your account is not active!"
            );
        }
        if (!bcryptjs.compareSync(reqBody.password, existUser.password)) {
            throw new ApiError(
                StatusCodes.NOT_ACCEPTABLE,
                "Your email or password is incorrect!"
            );
        }

        /**
         *  N·∫øu m·ªçi th·ª© OK th√¨ b·∫Øt ƒë·∫ßu t·∫°o Tokens ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£ v·ªÅ cho ph√≠a FE
            T·∫°o th√¥ng tin ƒë√≠nh k√®m trong JWT token: bao g·ªìm _id v√† email c·ªßa user
         */
        const userInfo = {
            _id: existUser._id,
            email: existUser.email,
        };

        // T·∫°o ra 2 lo·∫°i token, accessToken v√† refreshToken ƒë·ªÉ tr·∫£ v·ªÅ cho ph√≠a FE
        const accessToken = await JwtProvider.generateToken(
            userInfo,
            env.ACCESS_TOKEN_SECRET_SIGNATURE,
            // 5
            env.ACCESS_TOKEN_LIFE
        );

        const refreshToken = await JwtProvider.generateToken(
            userInfo,
            env.REFRESH_TOKEN_SECRET_SIGNATURE,
            // 15
            env.REFRESH_TOKEN_LIFE
        );

        // Tr·∫£ v·ªÅ th√¥ng tin c·ªßa user k√®m theo 2 c√°i token v·ª´a t·∫°o ra
        return {
            accessToken,
            refreshToken,
            ...pickUser(existUser),
        };
    } catch (error) {
        throw error;
    }
};

const refreshToken = async (clientRefreshToken) => {
    try {
        // Verify / gi·∫£i m√£ c√°i refresh token xem c√≥ h·ª£p l·ªá hay kh√¥ng
        const refreshTokenDecoded = await JwtProvider.verifyToken(
            clientRefreshToken,
            env.REFRESH_TOKEN_SECRET_SIGNATURE
        );

        // ƒêo·∫°n n√†y v√¨ ch√∫ng ta ch·ªâ l∆∞u nh·ªØng th√¥ng tin unique v√† c·ªë ƒë·ªãnh c·ªßa user trong token r·ªìi, v√¨ v·∫≠y c√≥ th·ªÉ
        //l·∫•y lu√¥n t·ª´ decoded ra, ti·∫øt ki·ªám query v√†o DB ƒë·ªÉ l·∫•y data m·ªõi

        const userInfo = {
            _id: refreshTokenDecoded._id,
            email: refreshTokenDecoded.email,
        };

        // T·∫°o accessToken m·ªõi
        const accessToken = await JwtProvider.generateToken(
            userInfo,
            env.ACCESS_TOKEN_SECRET_SIGNATURE,
            // 5 // 5s ƒë·ªÉ test token h·∫øt h·∫°n
            env.ACCESS_TOKEN_LIFE // 1 ti·∫øng
        );

        return { accessToken };
    } catch (error) {
        throw error;
    }
};

const update = async (userId, reqBody, userAvatarFile) => {
    try {
        // Query user v√† ki·ªÉm tra cho ch·∫Øc ch·∫Øn
        const existUser = await userModel.findOneById(userId);
        //C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
        if (!existUser)
            throw new ApiError(StatusCodes.NOT_FOUND, "Account not found");
        if (!existUser.isActive) {
            throw new ApiError(
                StatusCodes.NOT_ACCEPTABLE,
                "Your account is not active!"
            );
        }

        // Kh·ªüi t·∫°o k·∫øt qu·∫£ updated User ban ƒë·∫ßu l√† empty
        let updatedUser = {};

        // Tr∆∞·ªùng h·ª£p change password
        if (reqBody.current_password && reqBody.new_password) {
            // Ki·ªÉm tra c√°i Pass hi·ªán t·∫°i coi c√≥ ƒë√∫ng hay kh√¥ng
            if (
                !bcryptjs.compareSync(
                    reqBody.current_password,
                    existUser.password
                )
            ) {
                throw new ApiError(
                    StatusCodes.NOT_ACCEPTABLE,
                    "Your current password is incorrect!"
                );
            }
            // N·∫øu nh∆∞ current password l√† ƒë√∫ng th√¨ ch√∫ng ta s·∫Ω hash Password m·ªõi v√† update l·∫°i v√†o DB
            updatedUser = await userModel.update(existUser._id, {
                password: bcryptjs.hashSync(reqBody.new_password, 8),
            });
        } else if (userAvatarFile) {
            // Tr∆∞·ªùng h·ª£p upload file l√™n Cloud Storage, c·ª• th·ªÉ l√† Cloudinary
            const uploadResult = await CloudinaryProvider.streamUpload(
                userAvatarFile.buffer,
                "users"
            );
            // console.log("üöÄ ~ update ~ uploadResult:", uploadResult);

            // L∆∞u l·∫°i URL (secure_url) c·ªßa c√°i file ·∫£nh v√†o trong DB
            updatedUser = await userModel.update(existUser._id, {
                avatar: uploadResult.secure_url,
            });
        } else {
            // Tr∆∞·ªùng h·ª£p update c√°c th√¥ng tin chung, v√≠ d·ª• nh∆∞ displayName
            updatedUser = await userModel.update(existUser._id, reqBody);
        }

        return pickUser(updatedUser);
    } catch (error) {
        throw error;
    }
};

export const userService = {
    createNew,
    verifyAccount,
    login,
    refreshToken,
    update,
};
